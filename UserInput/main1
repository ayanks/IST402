package UserInput

import (
	"fmt"
	"golang.org/x/crypto/chacha20"
)

func main() {
	var key, plaintext string

	// Get user input for key and plaintext
	fmt.Print("Enter encryption key: ")
	fmt.Scanln(&key)

	fmt.Print("Enter plaintext to encrypt: ")
	fmt.Scanln(&plaintext)

	// Encrypt the plaintext
	encrypted, err := encrypt(key, plaintext)
	if err != nil {
		fmt.Println("Encryption error:", err)
		return
	}

	fmt.Printf("Encrypted: %x\n", encrypted)

	// Decrypt the ciphertext
	decrypted, err := decrypt(key, encrypted)
	if err != nil {
		fmt.Println("Decryption error:", err)
		return
	}

	fmt.Println("Decrypted:", decrypted)
}

func encrypt(key, plaintext string) ([]byte, error) {
	// Convert key to a byte slice
	keyBytes := []byte(key)

	// Create a new ChaCha20 cipher with the provided key
	cipher, err := chacha20.NewUnauthenticatedCipher(keyBytes, nil)
	if err != nil {
		return nil, err
	}

	// Create a buffer to store the encrypted data
	encrypted := make([]byte, len(plaintext))

	// Encrypt the plaintext
	cipher.XORKeyStream(encrypted, []byte(plaintext))

	return encrypted, nil
}

func decrypt(key string, ciphertext []byte) (string, error) {
	// Convert key to a byte slice
	keyBytes := []byte(key)

	// Create a new ChaCha20 cipher with the provided key
	cipher, err := chacha20.NewUnauthenticatedCipher(keyBytes, nil)
	if err != nil {
		return "", err
	}

	decrypted := make([]byte, len(ciphertext))

	// Decrypt the ciphertext
	cipher.XORKeyStream(decrypted, ciphertext)

	return string(decrypted), nil
}
